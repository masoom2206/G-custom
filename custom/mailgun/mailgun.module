<?php

/**
 * @file
 * Provides integration with Mailgun's email sending API.
 */

/**
 * Implements hook_menu().
 */
function mailgun_menu() {
  $items = array();

  $items['admin/config/system/mailgun'] = array(
    'title' => 'Mailgun',
    'description' => 'Configure Mailgun settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_admin_settings'),
    'access arguments' => array('administer mailgun'),
    'file' => 'mailgun.admin.inc',
  );
  $items['admin/config/system/mailgun/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/system/mailgun/test'] = array(
    'title' => 'Send test email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_test_form'),
    'access arguments' => array('administer mailgun'),
    'description' => 'Send a test e-mail using the Mailgun API.',
    'file' => 'mailgun.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/system/mailgun/testmailgun'] = array(
    'title' => 'Mailgun status',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_status_form'),
    'access arguments' => array('administer mailgun'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/system/mailgun/user_mailgun_register_maillist'] = array(
    'title' => 'Mailgun Mailing List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_maillist_form'),
    'access arguments' => array('administer mailgun'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/system/mailgun/mailgun_maillist_member_list/%'] = array(
    'title' => 'Mailgun Mailing List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_maillist_mailbase_form'),
    'access arguments' => array('administer mailgun'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/system/mailgun/user_mailgun_register_maillist/%/delete'] = array(
    'title' => 'Mailgun Mailing List Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_maillist_delete'),
    'access arguments' => array('administer mailgun'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/system/mailgun/mailgun_maillist_member_list'] = array(
    'title' => 'Mailing List Member',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_maillist_member_list'),
    'access arguments' => array('administer mailgun'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  ); 
  $items['admin/people/user_mailgun_subscriptions'] = array(
    'title' => 'Mailing List Member',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgun_maillist_member_list_advance'),
    'access arguments' => array('administer mailgun'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  ); 
 // if (variable_get('user_mailgun_register_ownform', 1)) {
    $items['user/%user/user_mailgun_advance_register'] = array(
      'title' => 'Mailing Lists',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('user_mailgun_advance_register_form', 1),
      'file' => 'user_mailgun_advance_register.pages.inc',
      'access arguments' => array('access content'),
      'weight' => 10,
    );
  $items['callback'] = array(
    'title' => 'Mailing Lists',
    'page callback' => 'callback_mailgun',
    'access arguments' => array('access content'),
  ); 
//  } 
  return $items;
}

function callback_mailgun(){
  $data = drupal_json_encode($_POST);
  $nid = db_insert('mailgun_route') // Table name no longer needs {}
    ->fields(array(
      'body' => $data,
      'status' => 1,
    ))
    ->execute();
  return 'done';
}

function mailgun_maillist_mailbase_form($form, &$form_state) {
  $mailing_id = arg(5);
  $form['name'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Member in Mailing list "'.arg(5).'"'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => TRUE,  // Added
  );
  $form['name']['author'] = array(
    '#type' => 'textfield',
    '#title' => t('Select new subscriber'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#autocomplete_path' => 'user/autocomplete',
    '#weight' => -1,
  );
  $form['name']['subuscription'] = array(
    '#type' => 'select', 
    '#title' => t('Subscribed'), 
    '#options' => array('1' => 'Yes', '0' => 'No'), 
    '#required' => TRUE,
  );
  $form['name']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#submit' => array('_maillist_member_form_submit'),
  );
  $form['member_list'] = array(
    '#markup' => get_mailing_member_list($mailing_id),
    '#prefix' => '<div id="mailing_list_div">',
    '#suffix' => '</div>',
  );
  return $form;
}


function mailgun_maillist_member_list_advance($form, &$form_state) {
  $mgClient = mailgun_get_client();
  # Issue the call to the client.
  $result = $mgClient->get("lists/pages", array(
    'limit' => 10
  ));
  
  $form['operations'] = array(
    '#type' => 'fieldset',
    '#title' => t('Operations'),
    '#collapsible' => False, // Added
  );
  $form['operations']['action'] = array(
    '#type' => 'select',
    '#options' => array('' => '- Choose an operation -', 'subscribe' => 'Subscribe', 'unsubscribed' => 'Un-Subscribe', 'delete' => 'Delete'),
  );  
  if (isset($result->http_response_body)) {
    $items = $result->http_response_body->items;
    if (isset($items)) {
      $header =  array('name' => 'Name', 'address' => 'Email Address', 'subscription' => 'Subscribed');
      $rows = array();    
      foreach ($items as $key => $value) {
       $row = get_mailing_member_list_row($value->address);
        $form['member_list'][$value->address] = array(
          '#type' => 'tableselect',
          '#options' => $row,
          '#prefix' => '<h2>Mailing list </h2>'.$value->address,
          '#header' => $header,
          '#empty' => t('No users found'),
        );
        
      }
    } 
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function get_mailing_member_list_row($listAddress) {
  $mgClient = mailgun_get_client();
  # Issue the call to the client.
  $result = $mgClient->get("lists/$listAddress/members/pages", array(
      'limit'      =>  100
  ));
  if (isset($result->http_response_body)) {
    $items = $result->http_response_body->items;
    if (isset($items)) {
      $header = array('Name', 'Email Address', 'Subscribed');
      $rows = array();    
      foreach ($items as $key => $value) {
        $rows[$value->address] = array(
            'name' => $value->name,
            'address' => $value->address,
            'subscription' => ($value->subscribed == 1) ? 'Subscribed' : 'Unsubscribed'
        );
      }
    } 
  }
  return $rows;
}


function mailgun_maillist_member_list($form, &$form_state) {
 $mgClient = mailgun_get_client();
  # Issue the call to the client.
  $result = $mgClient->get("lists/pages", array(
    'limit' => 10
  ));
  if (isset($result->http_response_body)) {
    $items = $result->http_response_body->items;
    if (isset($items)) {
      $header = array('Name', 'Email Address', 'Created', 'Description', 'Memeber Count', 'Access Level', 'Action');
      $rows = array();    
      foreach ($items as $key => $value) {
        $form['member_list'][$value->address] = array(
          '#markup' => get_mailing_member_list($value->address),
          '#prefix' => '<div id="mailing_list_div">',
          '#suffix' => '</div>',
        );
        
      }
    } 
  }
  return $form;
}

function _maillist_member_form_submit($form, &$form_state) {
  $mgClient = mailgun_get_client();
  $listAddress = arg(5);
  $values = $form_state['values'];
  $account = user_load_by_name($values['author']);
  # Issue the call to the client.
  $mail  = $account->mail;
  $name = $account->realname;
  $subuscription = $values['subuscription'];
  $result = $mgClient->post("lists/$listAddress/members", array(
    'address'     => $mail,
    'name'        => $name,
    'description' => 'test',
    'subscribed'  => $subuscription,
    'vars'        => '{"age": 26}'
  ));
}

function get_mailing_member_list($listAddress) {
  $mgClient = mailgun_get_client();
  # Issue the call to the client.
  $result = $mgClient->get("lists/$listAddress/members/pages", array(
      'limit'      =>  100
  ));
  if (isset($result->http_response_body)) {
    $items = $result->http_response_body->items;
    if (isset($items)) {
      $header = array('Name', 'Email Address', 'Subscribed');
      $rows = array();    
      foreach ($items as $key => $value) {
        $rows[] = array(
        // Simple row
            $value->name, $value->address, ($value->subscribed == 1) ? 'Subscribed' : 'Unsubscribed'
        );
      }
    } 
  }
  if(empty($rows)) {
      $rows[] = array('No Mailing list Found. '.l('click', 'admin/config/system/mailgun/user_mailgun_register_maillist/'.$listAddress).' here to add new one.' );
    }
  return '<div><div><h2>Mailing List</h2>'.$listAddress.'</div><div>'.theme('table', array('header' => $header, 'rows' => $rows)).'</div></div><br/>';
  
}


function mailgun_maillist_form($form, &$form_state) {
  $form['mailing_list'] = array(
    '#markup' => get_mailing_list_live(),
    '#prefix' => '<div id="mailing_list_div">',
    '#suffix' => '</div>',
  );
  $form['date_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add new Mailing List'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['date_fieldset']['address'] = array(
    '#type' => 'textfield', 
    '#title' => t('Address'), 
    '#prefix' => '<div id="">',
    '#field_suffix' => '@'.variable_get('mailgun_fallback_domain'),
    '#size' => 60, 
    '#maxlength' => 128, 
    '#required' => TRUE,
  );
  $form['date_fieldset']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Name'), 
    '#size' => 60, 
    '#maxlength' => 128, 
    '#required' => TRUE,
  );
  $form['date_fieldset']['description'] = array(
    '#type' => 'textfield', 
    '#title' => t('Description'), 
    '#size' => 60, 
    '#maxlength' => 128, 
    '#required' => TRUE,
  );
  $form['date_fieldset']['access_level'] = array(
    '#type' => 'select', 
    '#title' => t('Access Level'), 
    '#options' => array('readonly' => 'Read Only', 'members' => 'Members', 'everyone' => 'Everyone'), 
    '#required' => TRUE,
  );
  $form['date_fieldset']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#suffix' => '</div>',
    '#submit' => array('_maillist_form_submit'),
  );
  return $form;
}

function get_mailing_list_live() {
  $mgClient = mailgun_get_client();
  # Issue the call to the client.
  $result = $mgClient->get("lists/pages", array(
    'limit' => 10
  ));
  if (isset($result->http_response_body)) {
    $items = $result->http_response_body->items;
    if (isset($items)) {
      $header = array('Name', 'Email Address', 'Created', 'Description', 'Memeber Count', 'Access Level', 'Action');
      $rows = array();    
      foreach ($items as $key => $value) {
        $rows[] = array(
        // Simple row
            $value->name, l($value->address, 'admin/config/system/mailgun/mailgun_maillist_member_list/'.$value->address), $value->created_at, $value->description, $value->members_count, $value->access_level, l('List/Add Member', 'admin/config/system/mailgun/mailgun_maillist_member_list/'.$value->address). ' | '. l('Delete Mailing list', 'admin/config/system/mailgun/user_mailgun_register_maillist/'.$value->address.'/delete')
        );
      }
    } 
    else {
      $rows[] = array('No Mailing list Found. '.l('click', 'admin/config/system/mailgun/user_mailgun_register_maillist').'here to add new one.' );
    }
  }
  return '<div><div><h1>Mailing Lists</h1></div><div>'.theme('table', array('header' => $header, 'rows' => $rows)).'</div></div>';
}


function mailgun_maillist_delete($form, &$form_state) {
  global $base_url;
  $account_id = arg(5);
  $form['account_id'] = array(
    '#type' => 'hidden',
    '#value' => $account_id
  );
  $form = confirm_form($form,
    'Are you sure, Do you want to delete?',
    'admin/config/system/mailgun/user_mailgun_register_maillist',
    'The action cannot be undone.',
    'Delete',
    'Cancel'
  );
  return $form;
}

function mailgun_maillist_delete_submit($form, &$form_state) {
  // Required actions here
  drupal_Set_message($form_state['values']['account_id'].' mailing list have been deleted');
  $listAddress = $form_state['values']['account_id'];
  # Issue the call to the client.
  $mgClient = mailgun_get_client();
  $result = $mgClient->delete("lists/$listAddress");
  drupal_goto('admin/config/system/mailgun/user_mailgun_register_maillist');
}
  


function _maillist_form_submit(&$form, &$form_state) {
  $mgClient = mailgun_get_client();
  $result = $mgClient->post("lists",array('address'=> $form_state['input']['address'].'@'.variable_get('mailgun_fallback_domain'),'name'=> $form_state['input']['name'],'description' => $form_state['input']['description'] , 'access_level' => $form_state['input']['access_level']));
  $form_state['rebuild'] = TRUE;
  drupal_set_message(t('The form has been submitted.'));
  $form_state['input'] = array();
  $form_state['value'] = array(); 
  $form_state['rebuild'] = TRUE;
  return $form;
}

function mailgun_status_form($form, &$form_state) {
  $client = mailgun_get_client();
  // You could also supply your own API key like this:
  // $client = mailgun_get_client('key-xxxxxxxx');
  $message = '';
  try {
    // Use the $client variable to perform any action you want. Here we're just going to get a list of domains.
    $result = $client->get('domains');
    // For a list of all the response codes, see: https://documentation.mailgun.com/api-intro.html#errors
    switch ($result->http_response_code) {
      case 200:
        $message .= 'Everything worked as expected.';
        break;
      case 400:
        $message .= 'Bad Request - Often missing a required parameter.';
        break;
      case 401:
        $message .= 'Unauthorized - No valid API key provided.';
        break;
      case 402:
        $message .= 'Request Failed - Parameters were valid but request failed.';
        break;
      case 404:
        $message .= 'Not Found - The requested item doesn’t exist.';
        break;
      case 500:
      case 502:
      case 503:
      case 504:
        $message .= 'Server Errors - something is wrong on Mailgun’s end.';
        break;
    }
    $message .= "<br/>";
    $message .= $result->http_response_body->total_count . " items retrieved.<br/>";
    foreach ($result->http_response_body->items as $item) {
      $message .= 'Domain: ' . $item->name . "<br/>";
      $message .= 'Created at: ' . $item->created_at . "<br/>";
      $message .= 'State: ' . $item->state . "<br/>";
      $message .= 'Type: ' . $item->type . "<br/><br/>";
    }
  } catch (Exception $e) {
    $message .= 'Exception occurred: ' . $e->getCode() . ': ' . $e->getMessage();
  }
  $form['status'] = array(
   '#markup' => $message,
  );
  return $form;
}

/**
 * Implements hook_permission().
 */
function mailgun_permission() {
  return array(
    'administer mailgun' => array(
      'title' => t('Administer Mailgun'),
      'description' => t('Perform administration tasks for the Mailgun e-mail sending service.'),
      "restrict access" => TRUE,
    ),
  );
}

/**
 * Implements hook_help().
 */
function mailgun_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/mailgun':
      return '<p>' . t('See <a href="@url">documentation</a> for instructions on installing and configuring Mailgun.', array('@url' => url('https://www.drupal.org/node/2547591'))) . '</p>';
      break;
    case 'admin/config/system/mailgun/test':
      return '<p>' . t('Use this form to send a test e-mail to ensure you have correctly configured Mailgun.') . '</p>';
      break;
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function mailgun_cron_queue_info() {
  $queues = array();
  $queues['mailgun_queue'] = array(
    'worker callback' => 'mailgun_send',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_mail().
 */
function mailgun_mail($key, &$message, $params) {
  switch ($key) {
    case 'test':
      $message['subject'] = t('Mailgun test email');
      $message['body'] = $params['message'];
      if ($params['attachment']) {
        $message['params']['attachments'] = array(drupal_realpath('misc/druplicon.png'));
      }
      break;
  }
}

/**
 * Get the Mailgun client to access Mailgun's endpoints.
 *
 * @param string $key
 *   The Mailgun API key. Leave empty to use the API key saved in database.
 */
function mailgun_get_client($key = '') {
  $key = (empty($key)) ? variable_get('mailgun_api_key', '') : $key;
  if (empty($key)) {
    watchdog('mailgun', 'Mailgun client initialization failed: Missing API key.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  $client = new \Mailgun\Mailgun($key);
  return $client;
}

/**
 * Send an e-mail using the Mailgun API.
 *
 * @param array $mailgun_message
 *   A Mailgun message array. Contains the following keys:
 *   - from: The e-mail addressthe message will be sent from.
 *   - to: The e-mail addressthe message will be sent to.
 *   - subject: The subject of the message.
 *   - text: The plain-text version of the message. Processed using check_plain().
 *   - html: The original message content. May contain HTML tags.
 *   - cc: One or more carbon copy recipients. If multiple, separate with commas.
 *   - bcc: One or more blind carbon copy recipients. If multiple, separate with commas.
 *   - o:tag: An array containing the tags to add to the message. See: https://documentation.mailgun.com/user_manual.html#tagging.
 *   - o:campaign: The campaign ID this message belongs to. See: https://documentation.mailgun.com/user_manual.html#um-campaign-analytics.
 *   - o:deliverytime: Desired time of delivery. Messages can be scheduled for a maximum of 3 days in the future. See: https://documentation.mailgun.com/api-intro.html#date-format.
 *   - o:dkim: Boolean indicating whether or not to enable DKIM signatures on per-message basis.
 *   - o:testmode: Boolean indicating whether or not to enable test mode. See: https://documentation.mailgun.com/user_manual.html#manual-testmode.
 *   - o:tracking: Boolean indicating whether or not to toggle tracking on a per-message basis. See: https://documentation.mailgun.com/user_manual.html#tracking-messages.
 *   - o:tracking-clicks: Boolean or string "htmlonly" indicating whether or not to toggle clicks tracking on a per-message basis. Has higher priority than domain-level setting.
 *   - o:tracking-opens: Boolean indicating whether or not to toggle clicks tracking on a per-message basis. Has higher priority than domain-level setting.
 *   - h:X-My-Header: h: prefix followed by an arbitrary value allows to append a custom MIME header to the message (X-My-Header in this case). For example, h:Reply-To to specify Reply-To address.
 *   - v:my-var: v: prefix followed by an arbitrary name allows to attach a custom JSON data to the message. See: https://documentation.mailgun.com/user_manual.html#manual-customdata.
 *
 * @return bool
 *   TRUE if the mail was successfully accepted, FALSE otherwise.
 */
function mailgun_send($mailgun_message) {
  $key = variable_get('mailgun_api_key', '');

  // Use the 'from' address specified in configuration, if available.
  $mailgun_message['from'] = variable_get('mailgun_from', $mailgun_message['from']);

  // Extract the domain from the sender's email address. Use regular expression to check since it could be either a plain email address or in the form "Name <example@example.com>".
  $tokens = (preg_match('/^\s*(.+?)\s*<\s*([^>]+)\s*>$/', $mailgun_message['from'], $matches) === 1) ? explode('@', $matches[2]) : explode('@', $mailgun_message['from']);
  $mail_domain = array_pop($tokens);

  $client = mailgun_get_client();
  if (!$client) {
    return FALSE;
  }

  // Merge the $mailgun_message array with options.
  $mailgun_message += $mailgun_message['params'];
  unset($mailgun_message['params']);

  // Retrieve a list of available domains first.
  $domains = array();
  try {
    $result = $client->get('domains');
    if ($result->http_response_code == 200) {
      foreach ($result->http_response_body->items as $item) {
        /**
         * @Issue(
         *   "Add a configuration option that prevents from sending to sandbox
         *   domains"
         *   type="improvement"
         *   priority="low"
         * )
         * @Issue(
         *   "Log an error if there are no domains available, taking into
         *   account the 'sandbox' option"
         *   type="bug"
         *   priority="low"
         * )
         */
        if ($item->state == 'active') {
          $domains[$item->name] = $item->name;
        }
      }
    }
    else {
      watchdog('mailgun', 'Mailgun server returned a %code error. Could not retrieve domain list.', array('%code' => $result->http_response_code), WATCHDOG_ERROR);
    }
  } catch (Exception $e) {
    watchdog('mailgun', 'An exception occurred while retrieving domains. @code: @message', array('@code' => $e->getCode(), '@message' => $e->getMessage()), WATCHDOG_ERROR);
  }

  // Now, we need to get the working domain. This is generally the domain the
  // From address is on or the root domain of it.
  $working_domain = '';
  if ($key = array_search($mail_domain, $domains) !== FALSE) {
    // Great. Found it.
    $working_domain = $mail_domain;
  }
  else {
    // Oops. No match. Perhaps it's a subdomain instead.
    foreach ($domains as $domain) {
      if (strpos($domain, $mail_domain) !== FALSE) {
        // Got it.
        $working_domain = $domain;
        break;
      }
    }
  }

  // If there is no matching domain, check if there is a fallback domain
  // defined.
  if (empty($working_domain)) {
    $fallback_domain = variable_get('mailgun_fallback_domain');
    if ($fallback_domain) {
      /**
       * @Issue(
       *   "Check if the fallback domain is active and log an error if not"
       *   type="bug"
       *   priority="low"
       * )
       */
      $working_domain = $fallback_domain;
    }
  }

  // There is a chance that the user is attempting to send from an email address that's on a domain not yet added to the Mailgun account.
  // In that case, abort sending and report error.
  if (empty($working_domain)) {
    watchdog('mailgun', 'Unable to locate a working domain for From address %mail. Aborting sending.', array('%mail' => $mailgun_message['from']), WATCHDOG_ERROR);
    return FALSE;
  }

  try {
    if (!empty($mailgun_message['attachments'])) {
      // Send message with attachments.
      $attachments = $mailgun_message['attachments'];
      unset($mailgun_message['attachments']);
      $result = $client->sendMessage($working_domain, $mailgun_message, array('attachment' => $attachments));
    }
    else {
      // Just good old mail with no attachment.
      $result = $client->sendMessage($working_domain, $mailgun_message);
    }

    // For a list of HTTP response codes, see: https://documentation.mailgun.com/api-intro.html#errors.
    if ($result->http_response_code == 200) {
      if (variable_get('mailgun_log', FALSE)) {
        watchdog('mailgun', 'Successfully sent message from %from to %to. %code: %message.', array('%from' => $mailgun_message['from'], '%to' => $mailgun_message['to'], '%code' => $result->http_response_code, '%message' => $result->http_response_body->message));
      }
      return TRUE;
    }
    else {
      watchdog('mailgun', 'Failed to send message from %from to %to. %code: %message.', array('%from' => $mailgun_message['from'], '%to' => $mailgun_message['to'], '%code' => $result->http_response_code, '%message' => $result->http_response_body->message), WATCHDOG_ERROR);
      return FALSE;
    }
  } catch (Exception $e) {
    watchdog('mailgun', 'Exception occurred while trying to send test email from %from to %to. @code: @message.', array('%from' => $mailgun_message['from'], '%to' => $mailgun_message['to'], '@code' => $e->getCode(), '@message' => $e->getMessage()));
  }
}
