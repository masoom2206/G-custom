<?php
/**
 * Implements hook_init()
 */
function listing_pdf_init(){
	global $base_url, $user;
	drupal_add_css(drupal_get_path('module', 'listing_pdf') . '/css/pdf.css');
	drupal_add_js(drupal_get_path('module', 'listing_pdf') . '/js/listing-brochures.js');
	if(arg(0) == 'edit-proof') {
		drupal_add_js(drupal_get_path('module', 'listing_marketing_system') . '/js/listing-pdf.js');
		drupal_add_js(drupal_get_path('module', 'listing_marketing_system') . '/js/jquery-ui.js');
	}
}
/**
* Implementation of hook_menu
*/
function listing_pdf_menu() {
  $items = array();
  //menu for pro brochures the Listing
	$items['listing-brochures/%'] = array(
		'title'				=> 'Listing Brochures',
		'description'		=> 'Listing Brochures',
		'page callback'		=> 'cbone_listing_brochures',
		//'access callback'	=> 'user_is_logged_in',
		'access callback' => 'brochures_postcard_menu_access',
		'page arguments' 	=> array(1),
		'file'				=> 'includes/listing_brochures.inc',
		'type'				=> MENU_NORMAL_ITEM,
	);
	$items['pro-brochures-approval/%'] = array(
		'title'				=> 'Listing Brochures Approval',
		'description'		=> 'Listing Brochures Approval',
		'page callback'		=> 'cbone_listing_brochures_approval',
		//'access callback'	=> 'user_is_logged_in',
		'access callback'	=> 'approve_page_access',
		'page arguments' 	=> array(1),
		'file'				=> 'includes/listing_brochures_approval.inc',
		'type'				=> MENU_NORMAL_ITEM,
	);
	$items['print-and-go/%'] = array(
		'title'				=> 'Print and go',
		'description'		=> 'Print and go',
		'page callback'		=> 'cbone_print_and_go',
		'access callback'	=> 'user_is_logged_in',
		'page arguments' 	=> array(1),
		'file'				=> 'includes/listing_brochures.inc',
		'type'				=> MENU_NORMAL_ITEM,
	);
	//menu for save online marketing in Listing brochures page  
	$items['print-and-go/marketing'] = array(
		'title'				=> 'Use for online marketing',
		'description'		=> 'Save mcpdf nid',
		'page callback'		=> 'manage_mcpdf_nid',
		'access callback'	=> 'user_is_logged_in',
	); 
	//menu for save online marketing on PDF generation page  
	$items['print-and-go/marketing/weblisting'] = array(
		'title'				=> 'Use for online marketing',
		'description'		=> 'Save mcpdf nid',
		'page callback'		=> 'weblisting_mcpdf_nid',
		'access callback'	=> 'user_is_logged_in',
	);
	//menu for save online marketing for shared listing on PDF generation page  
	$items['print-and-go/marketing/sharedlisting'] = array(
		'title'				=> 'Use for online marketing',
		'description'		=> 'Save mcpdf nid',
		'page callback'		=> 'shared_mcpdf_nid',
		'access callback'	=> 'user_is_logged_in',
	);
	$items['postcard/%'] = array(
		'title'				=> 'Post Card',
		'description'		=> 'Post Card',
		'page callback'		=> 'cbone_post_card',
		//'access callback'	=> 'user_is_logged_in',
		'access callback'	=> 'brochures_postcard_menu_access',
		'page arguments' 	=> array(1),
		'file'				=> 'includes/listing_brochures.inc',
		'type'				=> MENU_NORMAL_ITEM,
	); 
	$items['postcard-approval/%'] = array(
		'title'				=> 'Listing Post Card Approval',
		'description'		=> 'Listing Post Card Approval',
		'page callback'		=> 'cbone_listing_postcard_approval',
		//'access callback'	=> 'user_is_logged_in',
		'access callback'	=> 'approve_page_access',
		'page arguments' 	=> array(1),
		'file'				=> 'includes/listing_postcard_approval.inc',
		'type'				=> MENU_NORMAL_ITEM,
	);
	$items['generate-pdf/%/%'] = array( 
		'title' 			=> 'Generate PDF',
		'description' 		=> 'A node for PDF Generation',
		'page callback' 	=> 'pdf_edit_nodes',
		'access callback' 	=> 'user_is_logged_in',
		'page arguments' 	=> array(1, 2),
		'file'				=> 'includes/listing_brochures.inc',
		'type'				=> MENU_NORMAL_ITEM,
	 );
	$items['edit-proof/%/%'] = array(
		'title' 			=> 'Generate PDF',
		'description' 		=> 'A node for PDF Generation',
		'page callback' 	=> 'pdf_edit_proof_nodes',
		'access callback' 	=> 'user_is_logged_in',
		'page arguments' 	=> array(1, 2),
		'file'				=> 'includes/listing_brochures_approval.inc',
		'type'				=> MENU_NORMAL_ITEM,
	 );
	$items['pdf-delete/%/%/%'] = array(
		'title'				=> 'MCPDF Delete Node',
		'description'		=> 'MCPDF Delete Node',
		'access callback'	=> 'user_is_logged_in',
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('delete_mcpdf_node_form'),
		'file'				=> 'includes/listing_brochures.inc',
		'type'				=> MENU_NORMAL_ITEM,
	);
	$items['download_pdf/%/%'] = array(
		'title'				=> 'PDF Download',
		'description'		=> 'Download PDF File',
		'page callback'		=> 'download_pdf',
		'access callback'	=> TRUE,
		'page arguments' 	=> array(1, 2),
		'file'				=> 'includes/listing_brochures.inc',
		'type'				=> MENU_NORMAL_ITEM,
	);
	$items['shared-listing-pdf/%/%'] = array(
		'title'				=> 'PDF Download',
		'description'		=> 'Download Shared PDF File',
		'page callback'		=> 'shared_listing_pdf',
		'access callback'	=> 'user_is_logged_in',
		'page arguments' 	=> array(1, 2),
		'type'				=> MENU_NORMAL_ITEM,
	);
	$items['listing-pdf/sortable'] = array(
		'title'				=> 'PDF photos sortable',
		'description'		=> 'Save PDF photos sortable',
		'page callback'		=> 'listing_pdf_sortable',
		'access callback'	=> 'user_is_logged_in',
	);
	$items['pdf-send-for-approval'] = array(
		'title'				=> 'PDF send for approval',
		'description'		=> 'PDF send for approval',
		'page callback'		=> 'mc_pdf_send_for_approval',
		'access callback'	=> 'user_is_logged_in',
	);	
	$items['brochures-approval-update'] = array(
		'title'				=> 'Brochures approval update',
		'description'		=> 'Brochures approval update',
		'page callback'		=> 'mc_pdf_brochures_approval_update',
		'access callback'	=> 'user_is_logged_in',
	);
	$items['brochures-pdf-view'] = array(
		'title'				=> 'Brochures PDF view',
		'description'		=> 'Brochures PDF view',
		'page callback'		=> 'mc_pdf_brochures_agent_view',
		'access callback'	=> 'user_is_logged_in',
	);
	$items['auto-generate-mcpdf'] = array(
		'title'				=> 'Auto Generate mcpdf',
		'description'		=> 'Auto generate mcpdf',
		'page callback'		=> 'cbone_auto_generate_mcpdf',
		'access callback'	=> 'user_is_logged_in',
		'file'				=> 'includes/auto_generate_mcpdf.inc',
		'type'				=> MENU_NORMAL_ITEM,
	);
 return $items;
}
/**
 * Callback function brochures_postcard_menu_access()
 * to set the access of pro brochures and postcard page
 * @return TRUE/FALSE
 **/
function brochures_postcard_menu_access(){
	global $user;
	$admin_roles = array('Manager','Office Administrator','Siteadmin','Administrator', 'Marketing Coordinator');
	if(array_intersect($admin_roles, $user->roles)) {
		return TRUE;
	}
}
/**
 * Callback function approve_page_access()
 * to allow the access of approve page for agent 
 **/
function approve_page_access(){
	global $user;
	$access = FALSE;
	if($user->uid == 1){
		$access = TRUE;
	}
	else if($user->uid > 1){
		$nid = arg(1);
		$approve_arg = arg(0);
		if($approve_arg == 'pro-brochures-approval') {
			$pdf_section = 'pro-brochure';
		}
		else if($approve_arg == 'postcard-approval') {
			$pdf_section = 'post-card';
		}
		$query = db_select('cbone_listing_approve_pdf', 'apdf');
		$query->fields('apdf', array('pnid', 'pdf_section'))
			->condition('apdf.lnid', $nid, '=')
			->condition('apdf.pdf_section', $pdf_section, '=');
		$approve_pdf_nids = $query->execute()->fetchAll();
		$approve_pdf_status = '';
		$listed == '';
		$sold == '';
		if(!empty($approve_pdf_nids)) {
			foreach($approve_pdf_nids as $approve_pdf_nid) {
				$approve_mcpdf = node_load($approve_pdf_nid->pnid);
				$pdf_status_term = taxonomy_term_load($approve_mcpdf->field_mc_pdf_status['und']['0']['tid']);
				if($approve_pdf_nid->pdf_section == 'post-card') {
					if($approve_mcpdf->field_postcard_type['und']['0']['value'] == 'listed') {
						$listed = 1;
					}
					else if($approve_mcpdf->field_postcard_type['und']['0']['value'] == 'sold') {
						$sold = 1;
					}
					if($listed == 1 && $sold == 1) {
						$access = FALSE;
					}
					else {
						$access = TRUE;
					}
				}
				else if($approve_pdf_nid->pdf_section == 'pro-brochure') {
					$access = FALSE;
				}
			}
		}
		else {
			$access = TRUE;
		}
	}
	return $access;
}
/**
 * Implements hook_theme
 **/
function listing_pdf_theme($existing, $type, $theme, $path) {
	return array(
		'listing_brochures' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/listing_brochures', // do not include .tpl.php
		),
		'listing_brochures_approval' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/listing_brochures_approval', // do not include .tpl.php
		),
		'pdf_edit_proof' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/pdf_edit_proof', // do not include .tpl.php
		),
		'listing_pdf' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/listing_pdf', // do not include .tpl.php
		),
		'print_and_go' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/print_and_go', // do not include .tpl.php
		),
		'post_card' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/post_card', // do not include .tpl.php
		),
		'listing_postcard_approval' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/listing_postcard_approval', // do not include .tpl.php
		),
		'pdf_form_test' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/pdf_form_test', // do not include .tpl.php
		),
	);
	return $theme;
}
/**
 * Implements hook_node_delete()
 * @return $node
 */
function listing_pdf_node_delete($node) {
	//delete pdf nid from approve table after node delete
	if($node->type == 'mc_pdf') {
		$nid = $node->nid;
		$num_deleted = db_delete('cbone_listing_approve_pdf')
		  ->condition('pnid', $nid)
		  ->execute();
	}
}
/************************Code for listing pdf generation**********************************/
/**
 * function get_mcpdf_nid()
 * to get MC PDF nid
 * return @$result
 **/

function get_mcpdf_nid($nid1 = NULL, $nid2 = NULL) {
	if($nid1 != NULL){
		$pdf_nid1 = $nid1;
	}
	else{
		$pdf_nid1 = arg(1);
	}
	if($nid2 != NULL) {
		$pdf_nid2 = $nid2;
	}
	else {
		$pdf_nid2 = arg(2);
	}
	global $user,$base_url;
	if($pdf_nid1 !='' && $pdf_nid2 !='') {
		$query=db_select('field_data_field_lms_listing_reference', 'lms_ref');
		$query->innerJoin('field_data_field_template_reference', 'tr', 'lms_ref.entity_id = tr.entity_id');
		$query->innerJoin('node', 'n', 'lms_ref.entity_id = n.nid');
		$query->fields('lms_ref', array('entity_id'));
		$query->condition('lms_ref.field_lms_listing_reference_nid', $pdf_nid1, '=');
		$query->condition('lms_ref.entity_type', 'node', 'LIKE');
		$query->condition('lms_ref.bundle', 'mc_pdf', 'LIKE');
		$query->condition('tr.field_template_reference_nid', $pdf_nid2, '=');
		$query->condition('tr.entity_type', 'node', 'LIKE');
		$query->condition('tr.bundle', 'mc_pdf', 'LIKE');
		$result= $query->execute()->fetchField(); 
		//return $result;
		
		if(!empty($result)){
			$mcpdf_node=node_load($result);
			 return $nid = $mcpdf_node->nid;
		}
		else{
			 return $nid='';
		}		
	}else{
		 return $nid='';
	}
}

/**
 * function save_generated_pdf($nid1 = NULL, $nid2 = NULL)
 * to save MC PDF node on submitting the image sequences
 * on node "generate-pdf"
 **/
function save_generated_pdf($nid1 = NULL, $nid2 = NULL) {
	global $base_url;
	/************************rules download code*******************************/
	
	$mcpdf_id_pdf = get_mcpdf_nid($nid1, $nid2);
	
	if(file_exists('S3://PDF/'.$mcpdf_id_pdf.'.pdf')){
		$path = 'S3://PDF/'.$mcpdf_id_pdf.'.pdf';
		$fid = db_query("SELECT fid FROM {file_managed} WHERE uri = :path", array(':path' => $path))->fetchField();
		$file = file_load($fid);
		if(is_object($file)){
			file_delete($file);
		}
	}
	
	if($nid1 != NULL){
		$pdf_nid1 = $nid1;
	}
	else{
		$pdf_nid1 = arg(1);
	}
	if($nid2 != NULL) {
		$pdf_nid2 = $nid2;
	}
	else {
		$pdf_nid2 = arg(2);
	}
	$listing_node = node_load($pdf_nid1);
	$pdf_design_node = node_load($pdf_nid2);
	if( !empty($listing_node->field_lms_other_agent) ){
			$url = $base_url.'/co-agent/'.$pdf_nid1.'/'.$pdf_nid2; 
	}
	else{
		$url = $base_url.'/test/'.$pdf_nid1.'/'.$pdf_nid2; 
	}
	
	$headers = array();
	// Add cookie so that we can use the same access as the logged in user, if present.
    $headers = array(
      'Cookie' => $_SERVER['HTTP_COOKIE'],
    );
	// Fetch the content
	$response = drupal_http_request($url,  array('timeout' => 240, 'headers' => $headers));
	if(isset($response->data)){
		$data = $response->data;  
		$temp_folder = 'public://lms/'.$pdf_nid1.'/pdf/';
		file_prepare_directory($temp_folder, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
		$filename = $temp_folder.$mcpdf_id_pdf.".pdf";
		$realpath = drupal_realpath($filename);
		$fp = fopen($realpath, "w");
		fwrite($fp, $data);
		fclose($fp);
		$shared_pdf_size =  filesize($realpath);
		if($shared_pdf_size > 2048){
			//$cmd = "convert -density 200x200 -colorspace CMYK -resize 100% -quality 100 -compress jpeg $realpath $realpath";
			//exec($cmd, $op);
			
			$pdf_node = node_load($mcpdf_id_pdf);

			$file = (object)array(
				'uid' => $pdf_node->uid,
				'filename' => $mcpdf_id_pdf.".pdf",
				'uri' => $filename,
				'filemime' => file_get_mimetype($filename),
				'status' => 1,
				'display' => 1,
			);
			if ($file = file_move($file, $filename, $replace = FILE_EXISTS_RENAME)) {
				$pdf_node->field_generated_pdf['und']['0'] = (array)$file;
				//$listing_video->save( TRUE );
			}
			node_save($pdf_node);
			$real_path_temp_folder = drupal_realpath($temp_folder);
			$cmd = "rm $real_path_temp_folder 2>&1";
			exec($cmd, $op);
			pdf_image_generation($pdf_nid1, $pdf_nid2);			
			//return $pdf_node->nid;
		}
		else{
			watchdog('PDF filesize', 'We\'re sorry. An error occurred when building this PDF. We are aware of this intermittent problem and are working to resolve it. You should be able to download this PDF @tomorrow.', array('@tomorrow' => 'tomorrow'), WATCHDOG_ERROR);
			drupal_set_message('We\'re sorry. An error occurred when building this PDF. We are aware of this intermittent problem and are working to resolve it. You should be able to download this PDF tomorrow.', 'error');
		}
	}
	else{
		return drupal_set_message('An error has occured '.$response->error.' while creating PDF', 'error');
	}	
	/************************rules download code*******************************/
}

/**
 * function pdf_image_generation($nid1 = NULL, $nid2 = NULL)
 * to generate/save PDF image 
 * on submitting MC PDF node
 **/
function pdf_image_generation($nid1 = NULL, $nid2 = NULL) {
	
	if($nid1 != NULL){
		$pdf_nid1 = $nid1;
	}
	else{
		$pdf_nid1 = arg(1);
	}
	if($nid2 != NULL) {
		$pdf_nid2 = $nid2;
	}
	else {
		$pdf_nid2 = arg(2);
	}
	
	$result = get_mcpdf_nid($pdf_nid1, $pdf_nid2);
	$pdf_node = node_load($result);
	
	$uid = $pdf_node->field_generated_pdf['und']['0']['uid'];
	$uri = $pdf_node->field_generated_pdf['und']['0']['uri'];
	$pdf_url = file_create_url($uri);
	$pdf_content = file_get_contents($pdf_url);
	$pdf_name = basename($pdf_url);
	$pdf_file_explode = explode("?", $pdf_name);
	$pdf_file_name = $pdf_file_explode[0];
	
	$temp_folder = 'public://lms/PDF/';
	$realpath = drupal_realpath($temp_folder);
	$cmd = "rm -R $realpath 2>&1";
	exec($cmd,$op);
		
	$filepath = 'public://lms/PDF/pdf-thumb/';
	file_prepare_directory($filepath, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
	$pdf_path = drupal_realpath($filepath).'/'.$pdf_file_name;	
	file_put_contents($pdf_path, $pdf_content);
	$pdf_file = drupal_realpath($pdf_path);
	
	//get PDF file name
	$pdf_file_name = basename($pdf_file);
	$pdf_file_name = preg_replace('/\\.[^.\\s]{3,4}$/', '', $pdf_file_name);
	$pdf_first_page = drupal_realpath($pdf_path) . '[0]';
	if (file_exists($pdf_file) && filesize($pdf_file) > 0) {
		if(isset($pdf_node->field_pdf_preview_image['und'])){
			foreach ($pdf_node->field_pdf_preview_image['und'] as $key => $value) {
				$file = file_load($value['fid']);
				if(is_object($file)){
					unset($pdf_node->field_pdf_preview_image['und'][$key]);
					file_delete($file);
				}
			}
		}
		$filepath = 'public://pdf-thumbnail/agent-'.$uid.'/listing-'.$pdf_nid1.'-'.$pdf_nid2.'/';
		file_prepare_directory($filepath, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
		
		$name = $pdf_file_name.'.jpg';
		$image_path = drupal_realpath($filepath);
		if (file_exists($image_path) && filesize($image_path) > 0) {
			$cmd =  "convert -density 200 $pdf_file -quality 100 $image_path/$name";
			exec($cmd,$op);
			
			$scanned_directory = array_diff(scandir($image_path), array('..', '.'));
			$i=0;
			foreach($scanned_directory as $value){
				$filename = $filepath.$value;
				$file = (object)array(
					'uid' => $pdf_node->uid,
					'filename' => $value,
					'uri' => $filename,
					'filemime' => file_get_mimetype($filename),
					'status' => 1,
					'display' => 1,
				);
				if ($file = file_move($file, $filename, FILE_EXISTS_RENAME)) {
					$pdf_node->field_pdf_preview_image['und'][$i] = (array)$file;
				}
				$i++;
			}
		}
		
		node_save($pdf_node);
		$temp_folder = 'public://lms/PDF/';
		$realpath = drupal_realpath($temp_folder);
		$cmd = "rm -R $realpath 2>&1";
		exec($cmd,$op);
		$temp_folder = 'public://pdf-thumbnail/agent-'.$uid.'/listing-'.$pdf_nid1.'-'.$pdf_nid2.'/';
		$realpath = drupal_realpath($temp_folder);
		$cmd = "rm -R $realpath 2>&1";
		exec($cmd,$op);
		cbone_delete_mcpdf_agent_images($result);
		cbone_delete_mcpdf_images($result);
	} 
	else {
		cbone_delete_mcpdf_agent_images($result);
		cbone_delete_mcpdf_images($result);
		return "Error";
	}
}

/**
 * Callback function listing_pdf_sortable()
 * to saved the new order of listing photos
 **/
function listing_pdf_sortable(){
	module_load_include('inc', 'listing_pdf', 'includes/listing_brochures');
	if(isset($_POST['mcpdf_nid'])) {
		cbone_delete_mcpdf_agent_images($_POST['mcpdf_nid']);
		cbone_delete_mcpdf_images($_POST['mcpdf_nid']);
		$mcpdf_nid = $_POST['mcpdf_nid'];
		$mcpdf_node = node_load($mcpdf_nid);
		$nid1 = $_POST['nid1'];
		$nid2 = $_POST['nid2'];
		$fids=array();
		foreach ($_POST['neworder'] as $delta => $value) {
			$fids[]=$value['id'];
		}
		mcpdf_image($nid1, $mcpdf_nid, $fids);
	}
	//node_save($mcpdf_node);
	$serializefids = serialize($fids);
	$reuslt = db_merge('cbone_selected_photos')
			  ->key(array('mcpdf_id' => $_POST['mcpdf_nid']))
			  ->fields(array(
				  'listing_id' => $nid1,
				  'pdf_design_id' => $nid2,
				  'mcpdf_id' => $_POST['mcpdf_nid'],
				  'selected_photos_fid' => $serializefids,
			  ))
			  ->execute();
		
	mcpdf_agent_image($nid1, $mcpdf_nid);
	save_generated_pdf($nid1, $nid2);
	//pdf_image_generation($nid1, $nid2);
	cbone_delete_mcpdf_agent_images($_POST['mcpdf_nid']);
	cbone_delete_mcpdf_images($_POST['mcpdf_nid']);
	if($_POST['editproof'] == 1) {
		drupal_set_message(t("Updated successfully."), 'status');
		print 'editproof';
		exit(0);
	}
	else {
		print 'Saved';
		exit(0);
	}
	
}
/**
 * Callback function cbone_delete_mcpdf_images()
 * to delete photos from mc_pdf node 
 **/
function cbone_delete_mcpdf_images($nid){
	$mcpdf_node = node_load($nid);
	if(isset($mcpdf_node->field_pdf_photos['und'])) {
		foreach ($mcpdf_node->field_pdf_photos['und'] as $key => $value) {
			$file = isset($value['fid']) ? file_load($value['fid']) : '';
			if(is_object($file)) {
				unset($mcpdf_node->field_pdf_photos['und'][$key]);
				file_delete($file);
			}
		}
	}
	node_save($mcpdf_node);
	//return '';
}

/**
 * Callback function cbone_delete_mcpdf_agent_images()
 * to delete photos from mc_pdf node 
 **/
function cbone_delete_mcpdf_agent_images($nid){
	$mcpdf_node = node_load($nid);
	if(isset($mcpdf_node->field_primary_agent_photo['und'])){
		$pfile = file_load($mcpdf_node->field_primary_agent_photo['und'][0]['fid']);
		if(is_object($pfile)){
			unset($mcpdf_node->field_primary_agent_photo['und'][0]);
			file_delete($pfile);
		}
	}
	
	if(isset($mcpdf_node->field_co_listing_agent_photo['und'])){
		$cfile = file_load($mcpdf_node->field_co_listing_agent_photo['und'][0]['fid']);
		if(is_object($cfile)){
			unset($mcpdf_node->field_co_listing_agent_photo['und'][0]);
			file_delete($cfile);
		}
	}	
	node_save($mcpdf_node);
	//return '';
}
/************************Code for listing pdf generation**********************************/
/**
 * Callback function rules download
 * to displayed listing nid 
 * and template nid
 **/
function get_rules_download_nids() {
 $nid1 = arg(1);
 $nid2 = arg(2);
 
 $full_nid = 'test/'.$nid1.'/'.$nid2; 
 return $full_nid;
 }
 
 /**
 * Callback function manage_mcpdf_nid()
 * to saved the mc_pdf nid on choose
 * radio button Use For Marketing Online
 **/
function manage_mcpdf_nid(){
//print 'hello';
//print $_POST['mcpdf_nid'];
//print $_POST['listing_nid'];
//print $_POST['shared_mcpdf_nid'];
	if(isset($_POST['mcpdf_nid']) || isset($_POST['shared_mcpdf_nid'])) {
		$mc_pdfnid = $_POST['mcpdf_nid'];
		$listing_nid = $_POST['listing_nid'];
		$listing_node = node_load($listing_nid);
		$shared_mcpdf_nid = $_POST['shared_mcpdf_nid'];
		db_merge('cbone_website_settings')
			  ->key(array('nid' => $listing_nid, 'uid' => $listing_node->uid))
			  ->fields(array(
					'nid' => $listing_nid,
					'uid' => $listing_node->uid,
					'timestamp' => REQUEST_TIME,
					'print_and_go' => $mc_pdfnid,
					'shared_lisitng' => $shared_mcpdf_nid,
			  ))
			  ->execute();
	}
print "mcpdf nid saved";
}
/**
 * Callback function manage_mcpdf_nid()
 * to saved the mc_pdf nid on choose
 * radio button Use For Marketing Online
 **/
function weblisting_mcpdf_nid(){
//print $_POST['mcpdf_nid'];
//print $_POST['listing_nid'];
	if(isset($_POST['mcpdf_nid'])) {
		$mc_pdfnid = $_POST['mcpdf_nid'];
		$listing_nid = $_POST['listing_nid'];
		$listing_node = node_load($listing_nid);
		db_merge('cbone_website_settings')
			  ->key(array('nid' => $listing_nid, 'uid' => $listing_node->uid))
			  ->fields(array(
					'nid' => $listing_nid,
					'uid' => $listing_node->uid,
					'timestamp' => REQUEST_TIME,
					'print_and_go' => $mc_pdfnid,
			  ))
			  ->execute();
	}
print "mcpdf nid saved";
}
/**
 * Callback function manage_mcpdf_nid()
 * to saved the mc_pdf nid on choose
 * radio button Use For Marketing Online
 **/
function shared_mcpdf_nid(){
//print $_POST['listing_nid'];
//print $_POST['shared_mcpdf_nid'];
	if(isset($_POST['shared_mcpdf_nid'])) {
		$listing_nid = $_POST['listing_nid'];
		$listing_node = node_load($listing_nid);
		$shared_mcpdf_nid = $_POST['shared_mcpdf_nid'];
		db_merge('cbone_website_settings')
			  ->key(array('nid' => $listing_nid, 'uid' => $listing_node->uid))
			  ->fields(array(
					'nid' => $listing_nid,
					'uid' => $listing_node->uid,
					'timestamp' => REQUEST_TIME,
					'shared_lisitng' => $shared_mcpdf_nid,
			  ))
			  ->execute();
	}
print "mcpdf nid saved";
}
/**
 * Callback function shared_listing_pdf()
 * to saved the mc_pdf nid on choose
 * radio button Use For Marketing Online
 **/
function shared_listing_pdf($nid1, $uid){
	error_reporting(0);
	global $base_url, $url;
	$query = db_select('field_data_field_lms_shared_agent', 'sa')
		->fields('sa')
		->condition('entity_id', $nid1, '=')
		->condition('field_lms_shared_agent_uid', $uid, '=');
	$shared_count = $query->execute()->rowCount();
	if($shared_count != 0) {
		//Query to get pdf design nid, display document values
		$query = db_select('cbone_website_settings', 'cws')
			->fields('cws', array('shared_lisitng'))
			->condition('nid', $nid1, '=');
		$shared_pdf_brochure = $query->execute()->fetchField();
		if(!empty($shared_pdf_brochure)){
			$nid2 = $shared_pdf_brochure;
			$mcpdf_id_pdf = get_mcpdf_nid($nid1, $nid2);
			cbone_delete_mcpdf_images($mcpdf_id_pdf);
			
			$mcpdf_node = node_load($mcpdf_id_pdf);
			if(isset($mcpdf_node->field_generated_pdf['und'][0]['fid'])){
				$pfile = file_load($mcpdf_node->field_generated_pdf['und'][0]['fid']);
				if(is_object($pfile)){
					unset($mcpdf_node->field_generated_pdf['und'][0]);
					file_delete($pfile);
				}
			}
			
			$pdf_nid1 = $nid1;
			$pdf_nid2 = $nid2;
			
			$photosquery= db_select('cbone_selected_photos', 'cs')
					->fields('cs', array('selected_photos_fid'))
					->condition('listing_id', $pdf_nid1, '=')
					->condition('pdf_design_id', $pdf_nid2, '=');
			$photosresult = $photosquery->execute()->fetchField();
			$photosresultarray = unserialize($photosresult); 
				
			$node_update= 	node_load($mcpdf_id_pdf);
			if(!empty($photosresultarray)){
				mcpdf_image($pdf_nid1, $mcpdf_id_pdf, $photosresultarray);
			}
			$url = $base_url.'/shared-listing/'.$uid.'/'.$pdf_nid1.'/'.$pdf_nid2; 
			$headers = array();
			// Add cookie so that we can use the same access as the logged in user, if present.
			$headers = array(
			  'Cookie' => $_SERVER['HTTP_COOKIE'],
			);
			// Fetch the content
			$response = drupal_http_request($url, array('timeout' => 600, 'headers' => $headers));
			if(isset($response->data)){
				$data = $response->data;
			  
				$temp_folder = 'public://lms/'.$pdf_nid1.'/pdf/';
				file_prepare_directory($temp_folder, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
				$filename = $temp_folder.'shared-listing'.$mcpdf_id_pdf.".pdf";
				$realpath = drupal_realpath($filename);
				$fp = fopen($realpath, "w");
				fwrite($fp, $data);
				fclose($fp);
				$shared_pdf_size =  filesize($realpath);
				if($shared_pdf_size > 2048){
					// $cmd = "convert -density 200x200 -colorspace CMYK -resize 100% -quality 100 -compress jpeg $realpath $realpath";
					// exec($cmd, $op);
					$pdf_node = node_load($mcpdf_id_pdf);

					$file = (object)array(
						'uid' => $pdf_node->uid,
						'filename' => 'shared-listing'.$mcpdf_id_pdf.".pdf",
						'uri' => $filename,
						'filemime' => file_get_mimetype($filename),
						'status' => 1,
						'display' => 1,
					);
					if ($file = file_move($file, $filename, $replace = FILE_EXISTS_RENAME)) {
						$pdf_node->field_shared_listing_pdf['und']['0'] = (array)$file;
						//$listing_video->save( TRUE );
					}
					node_save($pdf_node);
					$real_path_temp_folder = drupal_realpath($temp_folder);
					$cmd = "rm $real_path_temp_folder 2>&1";
					exec($cmd, $op);
					
					cbone_delete_mcpdf_images($mcpdf_id_pdf);	
					$node_load = node_load($mcpdf_id_pdf);
					
					$path = $node_load->field_shared_listing_pdf['und'][0]['uri'];
					$file_name = $node_load->field_shared_listing_pdf['und'][0]['filename'];
					$url = file_create_url($path);
					header('Content-disposition: attachment; filename="'.$file_name.'"');
					header("Content-Type: application/octet-stream");
					readfile($url);
				}
				else{
					watchdog('PDF filesize', 'We\'re sorry. An error occurred when building this PDF. We are aware of this intermittent problem and are working to resolve it. You should be able to download this PDF @tomorrow.', array('@tomorrow' => 'tomorrow'), WATCHDOG_ERROR);
					return drupal_set_message('We\'re sorry. An error occurred when building this PDF. We are aware of this intermittent problem and are working to resolve it. You should be able to download this PDF tomorrow.', 'error');
				}
			}
			else{
				return drupal_set_message('An error has occured '.$response->error.' while creating PDF', 'error');
			}
		}
		else {
			return drupal_set_message('This listing has not shared with you.', 'error');
		}
	}
	else {
		return drupal_set_message('This listing has not shared with you.', 'error');
	}
}
/**
 * Callback function mc_pdf_send_for_approval()
 * to send the PDF for approval to agent
 **/
function mc_pdf_send_for_approval(){
	$postcard_type = '';
	if($_POST['pdf_section'] == 'post-card') {
		$pdf_section = "Post Card";
	}
	else if($_POST['pdf_section'] == 'pro-brochure') {
		$pdf_section = "Pro Brochure";
	}	
	if(!empty($_POST['data'])){
		foreach($_POST['data'] as $data) {
			$term2 = taxonomy_get_term_by_name('PDF Pending Agent Approval');
			$tid = array_shift($term2)->tid;
			$mc_pdf_detail = node_load($data);
			$mc_pdf_detail->field_mc_pdf_status['und']['0']['tid'] = $tid;
			node_save($mc_pdf_detail);
			if($postcard_type == '' && isset($mc_pdf_detail->field_postcard_type['und']['0']['value'])){
				$postcard_type = $mc_pdf_detail->field_postcard_type['und']['0']['value'];
			}
		}
		if($postcard_type == 'listed'){
			$term_name = 'Proof Pending Approval - Just Listed Postcard';
		}
		else if($postcard_type == 'sold'){
			$term_name = 'Proof Pending Approval - Just Sold Postcard';
		}
		else {
			$term_name = 'Proof Pending Approval - Pro Brochure';
		}
		$term1 = taxonomy_get_term_by_name($term_name);
		$tid = array_shift($term1)->tid;
		$listing_node = node_load($_POST['nid']);
		$listing_node->field_mc_status_ref['und']['0']['tid'] = $tid;
		node_save($listing_node);
		mc_status_notifications($listing_node->nid, $term_name, $pdf_section);
		//print "<pre>";print_r($listing_node->field_lms_agent_uid);exit;
		/*$uid = isset($listing_node->field_lms_agent_uid['und']['0']['uid']) ? $listing_node->field_lms_agent_uid['und']['0']['uid'] : $listing_node->uid;
		$subject = 'Approval request to Listing Agent';
		$message = '"Approval request to Listing Agent" below<br/><br/>Thanks';
		mc_pdf_approval_mail($uid, $subject, $message);*/
		print "done";
	}
	else {
		print "empty";
	}
}

/**
 * Callback function mc_status_notifications_mail()
 * to send MC status notification
 **/
function mc_pdf_approval_mail($uid, $subject, $message){
	$agent_detail = user_load($uid);
	$mailto = isset($agent_detail->field_person_email['und']['0']['value']) ? $agent_detail->field_person_email['und']['0']['value'] : $agent_detail->mail;
	$header = "From: CB|One <support@cbone.me>\r\n";
	$header .= "Reply-To: support@cbone.me\r\n";
	$header .='MIME-Version: 1.0' . "\r\n";
	$header .= 'Content-Type: text/html; charset=ISO-8859-1' . "\r\n";
	mail($mailto, $subject, $message, $header);
}
/**
 * Callback function mc_pdf_brochures_approval_update()
 * to update the listing node and pdf node
 * by agent approval
 **/
function mc_pdf_brochures_approval_update(){
	//print "<pre>";print_r($_POST);exit;
	//$_POST['approve'] = 113370;
	//$_POST['listing_nid'] = 44295;
	//$_POST['pdf_section'] = 'pro-brochure';
	global $base_url;
	if($_POST['pdf_section'] == 'post-card') {
		$pdf_section = "Post Card";
	}
	else if($_POST['pdf_section'] == 'pro-brochure') {
		$pdf_section = "Pro Brochure";
	}
	if(isset($_POST['data'])){
		if(count($_POST['data']) == 1 && $_POST['data'][0] == 'reject-proofs') {
			$listing_node = node_load($_POST['listing_nid']);
			$pdf_nids = array();
			$agentnote = '';
			$postcard_type = '';
			foreach($_POST['mcpdfs'] as $value){
				$pdf_nids[] = $value['id'];
				if(trim($value['note']) != ''){
					$agentnote .= "PDF NID : ".$value['id']."<br/>Note : ".trim($value['note'])."<br/><br/>";
				}
				$tid = array_shift(taxonomy_get_term_by_name('Agent Rejected PDF'))->tid;
				$mc_pdf_detail = node_load($value['id']);
				$mc_pdf_detail->field_mc_pdf_status['und']['0']['tid'] = $tid;
				$mc_pdf_detail->field_mc_pdf_view['und']['0']['value'] = 0;
				$mc_pdf_detail->field_mc_pdf_note['und']['0']['value'] = trim($value['note']);
				node_save($mc_pdf_detail);
				if($postcard_type == '' && isset($mc_pdf_detail->field_postcard_type['und']['0']['value'])){
					$postcard_type = $mc_pdf_detail->field_postcard_type['und']['0']['value'];
				}
			}
			//Get count of mcpdf node which has send to approve
			/*$pdf_pending_agent_approval_tid = array_shift(taxonomy_get_term_by_name('PDF Pending Agent Approval'))->tid;
			$query = db_select('field_data_field_lms_listing_reference', 'lms');
			$query->join('field_data_field_mc_pdf_status', 'pdfs', 'lms.entity_id = pdfs.entity_id');
			$query->fields('lms', array('entity_id'))
				->condition('lms.field_lms_listing_reference_nid', $listing_node->nid, '=')
				->condition('lms.entity_type', 'node', 'LIKE')
				->condition('lms.bundle', 'mc_pdf', 'LIKE')
				->condition('pdfs.field_mc_pdf_status_tid', $pdf_pending_agent_approval_tid, '=');
			$mc_pdf_count = $query->execute()->rowCount();*/

			$term1 = taxonomy_get_term_by_name('PDF Pending Agent Approval');
			$pdf_pending_agent_approval_tid = array_shift($term1)->tid;
			$query = db_select('field_data_field_lms_listing_reference', 'lms');
			$query->join('field_data_field_mc_pdf_status', 'pdfs', 'lms.entity_id = pdfs.entity_id');
			$query->join('field_data_field_template_reference', 'tr', 'lms.entity_id = tr.entity_id');
			$query->join('field_data_field_pdf_section', 'ps', 'ps.entity_id = tr.field_template_reference_nid');
			$query->fields('lms', array('entity_id'))
				->condition('lms.field_lms_listing_reference_nid', $listing_node->nid, '=')
				->condition('lms.entity_type', 'node', 'LIKE')
				->condition('lms.bundle', 'mc_pdf', 'LIKE')
				->condition('pdfs.field_mc_pdf_status_tid', $pdf_pending_agent_approval_tid, '=')
				->condition('ps.field_pdf_section_value', strtolower($pdf_section), 'LIKE');
			$mc_pdf_count = $query->execute()->rowCount();

			if($mc_pdf_count == 0){
				if($postcard_type == 'listed'){
					$term_name = 'Returned to MC - Action Required - Just Listed Postcard';
				}
				else if($postcard_type == 'sold'){
					$term_name = 'Returned to MC - Action Required - Just Sold Postcard';
				}
				else {
					$term_name = 'Returned to MC - Action Required - Pro Brochure';
				}
				//update the listing node
				$term = taxonomy_get_term_by_name($term_name);
				$tid = array_shift($term)->tid;
				$listing_node->field_mc_status_ref['und']['0']['tid'] = $tid;
				node_save($listing_node);
				//mc_status_notifications($listing_node->nid, 'Returned to MC - Action Required');
			}
			//Get marketing coordinatot uid
			$coordinator_uid = $listing_node->field_lms_marketing_coordinator['und']['0']['uid'];
			$agent_uid = isset($listing_node->field_lms_agent_uid['und']['0']['uid']) ? $listing_node->field_lms_agent_uid['und']['0']['uid'] : $listing_node->uid;
			$agent_detail = user_load($agent_uid);
			//Send Mail to Marketing Coordinator
			$query = db_select('mc_notifications', 'mcn')
				->fields('mcn')
				->condition('mc_status', $term_name, '=');
			$mc_notification = $query->execute()->fetchAssoc();
			//$message = '"Edit Request sent back to Marketing Coordinator" below<br/><br/>Thanks';
			$subject = $mc_notification['title'];
			$preferred_name = isset($agent_detail->field_preferred_name['und']['0']['value']) ? $agent_detail->field_preferred_name['und']['0']['value'] : $agent_detail->name;
			$person_email = isset($agent_detail->field_person_email['und']['0']['value']) ? $agent_detail->field_person_email['und']['0']['value'] : $agent_detail->mail;
			$reply = $preferred_name.' <'.$person_email.'>';
			module_load_include('inc', 'mc_notifications', 'includes/notification_message');
			$message = mc_notification_message($mc_notification['id'], $listing_node->nid);
			$message = str_replace("[mc_notifications:agentnote]", $agentnote, $message);
			mc_status_notifications_mail($coordinator_uid, $subject, $message, $reply);
			insert_office_dashboard_notifications($listing_node->nid, $mc_notification['title'], $message, $term_name, $pdf_section);
			//return to manage-listing/[nid] page
			drupal_set_message(t('Your request for new proofs has been sent to your Marketing Coordinator'));
			print 'reject';
		}
		else {
			print "empty";
		}
	}
	else if(!empty($_POST['approve'])) {
		//Update mcpdf node
		$mcpdf_tid = array_shift(taxonomy_get_term_by_name('PDF Approved By Agent', 'marketing_concierge_pdf_status'))->tid;
		$mc_pdf_detail = node_load($_POST['approve']);
		$listing_node = node_load($_POST['listing_nid']);
		//fetch listing order_id
		$query = db_select('field_data_field_lms_listing_reference', 'lms')
			->fields('lms', array('entity_id'))
			->condition('field_lms_listing_reference_nid', $listing_node->nid, '=')
			->condition('entity_type', 'commerce_order', '=')
			->condition('bundle', 'commerce_order', '=');
		$order_id = $query->execute()->fetchField();
		//Check PDF file and order id
		if(isset($mc_pdf_detail->field_generated_pdf['und']['0']['uri']) && file_exists($mc_pdf_detail->field_generated_pdf['und']['0']['uri']) && $order_id != NULL) {
			$mc_pdf_detail->field_mc_pdf_status['und']['0']['tid'] = $mcpdf_tid;
			if(!empty($_POST['note'])) {
				$mc_pdf_detail->field_mc_pdf_note['und']['0']['value'] = $_POST['note'];
			}
			node_save($mc_pdf_detail);
			//Update listing node
			if($pdf_section == 'Pro Brochure') {
				$term_name = 'Proofs Approved - Pro Brochure';
			}
			else if($pdf_section == 'Post Card'){
				if(isset($mc_pdf_detail->field_postcard_type['und']['0']['value']) && $mc_pdf_detail->field_postcard_type['und']['0']['value'] == 'listed'){
					$term_name = 'Proofs Approved - Just Listed Postcard';
				}
				else if(isset($mc_pdf_detail->field_postcard_type['und']['0']['value']) && $mc_pdf_detail->field_postcard_type['und']['0']['value'] == 'sold'){
					$term_name = 'Proofs Approved - Just Sold Postcard';
				}
			}
			$listing_tid = array_shift(taxonomy_get_term_by_name($term_name, 'marketing_concierge_status'))->tid;
			$listing_node->field_mc_status_ref['und']['0']['tid'] = $listing_tid;
			node_save($listing_node);
			mc_status_notifications($listing_node->nid, $term_name, $pdf_section);
			//default vendor
			$default_vendor = variable_get('mc_print_vendor', '0');
			$vendor_detail = node_load($default_vendor);
			$vender_auth = $vendor_detail->field_secret_key['und']['0']['value'];
			$vendor_uri = $vendor_detail->field_vendor_api_uri['und']['0']['value'];
			if($_POST['pdf_section'] == 'post-card') {
				$order_request_url = $vendor_uri;
				// This is the data to POST to the Vendor.
				$data_to_post = array();
				$data_to_post['api_key'] = 'hZnZQWqWPJK9vzyMyeBbK7mnkz6wCdo7I30zBV6xuA';
				$data_to_post['external_order_url'] = $base_url.'/cbone/postcards/'.$listing_node->nid.'/'.$mc_pdf_detail->nid.'/'.$vender_auth;
				$data_to_post['external_order_id'] = $order_id;
				$data_to_post['external_pdf_id'] = $mc_pdf_detail->nid;

				$curl = curl_init();
				curl_setopt($curl, CURLOPT_URL, $order_request_url);
				curl_setopt($curl, CURLOPT_POST, sizeof($data_to_post));
				curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to_post);
				curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
				$result = curl_exec($curl);
				curl_close($curl);

				$response = json_decode($result, true);
			}
			else if($_POST['pdf_section'] == 'pro-brochure') {
				$order_request_url = $vendor_uri;
				// This is the data to POST to the Vendor.
				$data_to_post = array();
				$data_to_post['api_key'] = 'hZnZQWqWPJK9vzyMyeBbK7mnkz6wCdo7I30zBV6xuA';
				$data_to_post['external_order_url'] = $base_url.'/cbone/pro_brochures/'.$listing_node->nid.'/'.$mc_pdf_detail->nid.'/'.$vender_auth;
				$data_to_post['external_order_id'] = $order_id;
				$data_to_post['external_pdf_id'] = $mc_pdf_detail->nid;

				$curl = curl_init();
				curl_setopt($curl, CURLOPT_URL, $order_request_url);
				curl_setopt($curl, CURLOPT_POST, sizeof($data_to_post));
				curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to_post);
				curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
				$result = curl_exec($curl);
				curl_close($curl);

				$response = json_decode($result, true);
			}
			//Insert in custom table cbone_listing_approve_pdf (Created by cbone_service module)
			db_merge('cbone_listing_approve_pdf')
				->key(array('lnid' => $listing_node->nid, 'pnid' => $mc_pdf_detail->nid, 'pdf_section' => $_POST['pdf_section']))
				->fields(array(
					'lnid' => $listing_node->nid,
					'pnid' => $mc_pdf_detail->nid,
					'pdf_section' => $_POST['pdf_section'],
					'vender_id' => $default_vendor,
					'vender_auth' => $vender_auth,
					'vendor_order_id' => $response['request_id'],
					'vendor_created_at' => $response['created_at'],
					'created' => REQUEST_TIME,
					
				))
				->execute();
			drupal_set_message(t('Thank you. Your order has been sent to the printer. You will receive additional information via email.'));
			print 'done';
		}
		else {
			$postcard_type = '';
			foreach($_POST['mcpdfs'] as $value){
				$tid = array_shift(taxonomy_get_term_by_name('Agent Rejected PDF'))->tid;
				$mc_pdf_detail = node_load($value['id']);
				$mc_pdf_detail->field_mc_pdf_status['und']['0']['tid'] = $tid;
				$mc_pdf_detail->field_mc_pdf_view['und']['0']['value'] = 0;
				$mc_pdf_detail->field_mc_pdf_note['und']['0']['value'] = trim($value['note']);
				node_save($mc_pdf_detail);
				if($postcard_type == '' && isset($mc_pdf_detail->field_postcard_type['und']['0']['value'])){
					$postcard_type = $mc_pdf_detail->field_postcard_type['und']['0']['value'];
				}
			}
			//Get count of mcpdf node which has send to approve
			$term1 = taxonomy_get_term_by_name('PDF Pending Agent Approval');
			$pdf_pending_agent_approval_tid = array_shift($term1)->tid;
			$query = db_select('field_data_field_lms_listing_reference', 'lms');
			$query->join('field_data_field_mc_pdf_status', 'pdfs', 'lms.entity_id = pdfs.entity_id');
			$query->join('field_data_field_template_reference', 'tr', 'lms.entity_id = tr.entity_id');
			$query->join('field_data_field_pdf_section', 'ps', 'ps.entity_id = tr.field_template_reference_nid');
			$query->fields('lms', array('entity_id'))
				->condition('lms.field_lms_listing_reference_nid', $listing_node->nid, '=')
				->condition('lms.entity_type', 'node', 'LIKE')
				->condition('lms.bundle', 'mc_pdf', 'LIKE')
				->condition('pdfs.field_mc_pdf_status_tid', $pdf_pending_agent_approval_tid, '=')
				->condition('ps.field_pdf_section_value', strtolower($pdf_section), 'LIKE');
			$mc_pdf_count = $query->execute()->rowCount();

			if($mc_pdf_count == 0){
				if($postcard_type == 'listed'){
					$term_name = 'Returned to MC - Action Required - Just Listed Postcard';
				}
				else if($postcard_type == 'sold'){
					$term_name = 'Returned to MC - Action Required - Just Sold Postcard';
				}
				else {
					$term_name = 'Returned to MC - Action Required - Pro Brochure';
				}
				//update the listing node
				$term = taxonomy_get_term_by_name($term_name);
				$tid = array_shift($term)->tid;
				$listing_node->field_mc_status_ref['und']['0']['tid'] = $tid;
				node_save($listing_node);
				//mc_status_notifications($listing_node->nid, 'Returned to MC - Action Required');
			}
			//Get marketing coordinatot uid
			$coordinator_uid = $listing_node->field_lms_marketing_coordinator['und']['0']['uid'];
			$agent_uid = isset($listing_node->field_lms_agent_uid['und']['0']['uid']) ? $listing_node->field_lms_agent_uid['und']['0']['uid'] : $listing_node->uid;
			$agent_detail = user_load($agent_uid);
			//Send Mail to Marketing Coordinator
			$query = db_select('mc_notifications', 'mcn')
				->fields('mcn')
				->condition('mc_status', $term_name, '=');
			$mc_notification = $query->execute()->fetchAssoc();
			//$message = '"Edit Request sent back to Marketing Coordinator" below<br/><br/>Thanks';
			$subject = $mc_notification['title'];
			$preferred_name = isset($agent_detail->field_preferred_name['und']['0']['value']) ? $agent_detail->field_preferred_name['und']['0']['value'] : $agent_detail->name;
			$person_email = isset($agent_detail->field_person_email['und']['0']['value']) ? $agent_detail->field_person_email['und']['0']['value'] : $agent_detail->mail;
			$reply = $preferred_name.' <'.$person_email.'>';
			module_load_include('inc', 'mc_notifications', 'includes/notification_message');
			$message = mc_notification_message($mc_notification['id'], $listing_node->nid);
			$message = str_replace("[mc_notifications:agentnote]", $agentnote, $message);
			mc_status_notifications_mail($coordinator_uid, $subject, $message, $reply);
			insert_office_dashboard_notifications($listing_node->nid, $mc_notification['title'], $message, $term_name, $pdf_section);
			drupal_set_message(t("We're sorry but this order encountered a problem. We can not send this order to the print vendor."));
			print 'error';
		}
	}
	else {
		print 'empty';
	}
}
/**
 * Callback function mc_pdf_brochures_agent_view()
 * to update the pdf node after pdf view
 * by agent at "/pro-brochures-approval/[nid]" page
 **/
function mc_pdf_brochures_agent_view(){
	if(!empty($_POST['mcpdf_nid'])){
		$mc_pdf_detail = node_load($_POST['mcpdf_nid']);
		if(isset($mc_pdf_detail->field_generated_pdf['und']['0']['uri']) && file_exists($mc_pdf_detail->field_generated_pdf['und']['0']['uri'])) {
			$mc_pdf_detail->field_mc_pdf_view['und']['0']['value'] = 1;
			node_save($mc_pdf_detail);
			print 'done';
		}
		else {
			print 'error';
		}
	}
}

/**
 * Callback function mcpdf_agent_image()
 * to displayed listing-brochures node
 * @return $form
 **/
function mcpdf_agent_image($listing_nid = NULL, $mcpdf_nid = NULL){
	if($listing_nid != NULL){
		$nid = $listing_nid;
	}
	else{
		$nid = arg(1);
	}
	if($mcpdf_nid != NULL) {
		$result = $mcpdf_nid;
	}
	else {
		$result = get_mcpdf_nid();
	}
	//$nid= arg(1);
	$listing_node_load=node_load($nid);
	//$result = get_mcpdf_nid();
	if($result !='') {
		$mcpdf_load = node_load($result);
	}
	$pfid = '';
	$cfid = '';
	if(isset($listing_node_load->field_lms_sales_team['und'])){
		$sales_team = node_load($listing_node_load->field_lms_sales_team['und']['0']['nid']);
		if(isset($sales_team->field_sales_team_photo['und'])){
			$pfid= $sales_team->field_sales_team_photo['und']['0']['fid'];
		}
	}
	else{
		$user_load = user_load($listing_node_load->uid);
		if(!empty($user_load->picture)){
			$pfid=$user_load->picture->fid;
		}
		
		if(!empty($listing_node_load->field_lms_other_agent)){
			$co_user_load = user_load($listing_node_load->field_lms_other_agent['und']['0']['uid']);
			if(!empty($co_user_load->picture)){
				$cfid=$co_user_load->picture->fid;
			}
		}
	}
	
	$temp_folder = 'public://lms/mc_pdf_users/images/';
	$temp_realpath = file_prepare_directory($temp_folder, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
	
	if($pfid != ''){
		$lms_file = file_load($pfid);
		$filepath = $lms_file->uri;
		$content = file_get_contents($filepath);
		$filename = $temp_folder.$lms_file->filename;
		$realpath = drupal_realpath($filename);
		$fp = fopen($realpath, "w");
		fwrite($fp, $content);
		fclose($fp);
		if(file_get_mimetype($filename) == 'image/png' && is_alpha_png($realpath) ){
			$p_agentfilename = $temp_folder.$listing_node_load->nid.'-'.$listing_node_load->uid.'.jpg';
			$primary_agent_image = drupal_realpath($p_agentfilename);
			$cmd = "convert $realpath $primary_agent_image 2>&1";
			exec($cmd, $op);
			$agent_filename = $listing_node_load->nid.'-'.$listing_node_load->uid.'.jpg';
			$file_uri = $p_agentfilename;
		}
		else{
			$p_agentfilename = $temp_folder.$listing_node_load->nid.'-'.$listing_node_load->uid.'.png';
			$primary_agent_image = drupal_realpath($p_agentfilename);
			$cmd = "convert $realpath $primary_agent_image 2>&1";
			exec($cmd, $op);
			$agent_filename = $listing_node_load->nid.'-'.$listing_node_load->uid.'.png';
			$file_uri = $p_agentfilename;
		}
		
		$file = (object)array(
			'uid' => $listing_node_load->uid,
			'filename' => $agent_filename,
			'uri' => $file_uri,
			'filemime' => file_get_mimetype($file_uri),
			'status' => 1,
			'display' => 1,
		);
		if ($file = file_move($file, $file_uri, $replace = FILE_EXISTS_RENAME)) {
			$mcpdf_load->field_primary_agent_photo['und'][0] = (array)$file;
		}
	}
	if($cfid != ''){
		$lms_file = file_load($cfid);
		$filepath = $lms_file->uri;
		$content = file_get_contents($filepath);
		$filename = $temp_folder.$lms_file->filename;
		$realpath = drupal_realpath($filename);
		$fp = fopen($realpath, "w");
		fwrite($fp, $content);
		fclose($fp);
		if(file_get_mimetype($filename) == 'image/png' && is_alpha_png($realpath) ){
			$co_agentfilename = $temp_folder.'co-'.$listing_node_load->nid.'-'.$listing_node_load->uid.'.jpg';
			$co_agent_image = drupal_realpath($co_agentfilename);
			$cmd = "convert $realpath $co_agent_image 2>&1";
			exec($cmd, $op);
			$co_agent_filename = 'co-'.$listing_node_load->nid.'-'.$listing_node_load->uid.'.jpg';
			$file_uri = $co_agentfilename;
		}
		else{
			$co_agentfilename = $temp_folder.'co-'.$listing_node_load->nid.'-'.$listing_node_load->uid.'.png';
			$co_agent_image = drupal_realpath($co_agentfilename);
			$cmd = "convert $realpath $co_agent_image 2>&1";
			exec($cmd, $op);
			$co_agent_filename = 'co-'.$listing_node_load->nid.'-'.$listing_node_load->uid.'.png';
			$file_uri = $co_agentfilename;
		}
		$file = (object)array(
			'uid' => $listing_node_load->uid,
			'filename' => $co_agent_filename,
			'uri' => $file_uri,
			'filemime' => file_get_mimetype($file_uri),
			'status' => 1,
			'display' => 1,
		);
		
		
		if ($file = file_move($file, $file_uri, $replace = FILE_EXISTS_RENAME)) {
			$mcpdf_load->field_co_listing_agent_photo['und'][0] = (array)$file;
		}
	}
	node_save($mcpdf_load);
	$mc_pdf_folder = 'public://lms/mc_pdf_users/';
	$real_path_temp_folder = drupal_realpath($mc_pdf_folder);
	$cmd = "rm $real_path_temp_folder 2>&1";
	exec($cmd, $op);	
}

/**
 * Callback function mcpdf_image()
 * to displayed listing-brochures node
 * @return $form
 **/
function mcpdf_image($nid, $mcpdf_nid, $fids){
	global $user;
	$listing_node = node_load($nid);
	$mcpdf_node = node_load($mcpdf_nid);
	
	$temp_folder = 'public://lms/mc_pdf/images/'.$listing_node->nid.'/'.$user->uid.'/';
	$temp_realpath = file_prepare_directory($temp_folder, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
	
	$listing_temp_folder = 'public://lms_listing/mc_pdf/images/'.$listing_node->nid.'/'.$user->uid.'/';
	$listing_temp_realpath = file_prepare_directory($listing_temp_folder, FILE_CREATE_DIRECTORY || FILE_MODIFY_PERMISSIONS);
	
	foreach($fids as $delta => $fid){
		if($fid != ''){
			$lms_file = file_load($fid);
			$filepath = $lms_file->uri;
			$content = file_get_contents($filepath);
			$filename = $temp_folder.$lms_file->filename;
			$realpath = drupal_realpath($filename);
			$fp = fopen($realpath, "w");
			fwrite($fp, $content);
			fclose($fp);
			if(file_get_mimetype($filename) == 'image/png' && is_alpha_png($realpath) ){
				$new_filename = $listing_temp_folder.$listing_node->nid.'-'.$user->uid.'.jpg';
				$new_image = drupal_realpath($new_filename);
				$cmd = "convert $realpath $new_image 2>&1";
				exec($cmd, $op);
				$agent_filename = $listing_node->nid.'-'.$user->uid.'.jpg';
				$file_uri = $new_filename;
			}
			else{
				$new_filename = $listing_temp_folder.$listing_node->nid.'-'.$user->uid.'.jpg';
				$new_image = drupal_realpath($new_filename);
				$cmd = "convert $realpath $new_image 2>&1";
				exec($cmd, $op);
				$agent_filename = $listing_node->nid.'-'.$user->uid.'.jpg';
				$file_uri = $new_filename;
			}
			
			$file = (object)array(
				'uid' => $listing_node->uid,
				'filename' => $agent_filename,
				'uri' => $file_uri,
				'filemime' => file_get_mimetype($file_uri),
				'status' => 1,
				'display' => 1,
			);
			if ($file = file_move($file, $file_uri, $replace = FILE_EXISTS_RENAME)) {
				$mcpdf_node->field_pdf_photos['und'][$delta] = (array)$file;
			}
		}
	}
	node_save($mcpdf_node);
	$mc_pdf_folder = 'public://lms/mc_pdf/images/'.$listing_node->nid.'/'.$user->uid;
	$real_path_temp_folder = drupal_realpath($mc_pdf_folder);
	$cmd = "rm $real_path_temp_folder 2>&1";
	exec($cmd, $op);	
}

function is_alpha_png($fn){
    return (ord(@file_get_contents($fn, NULL, NULL, 25, 1)) == 6);
}