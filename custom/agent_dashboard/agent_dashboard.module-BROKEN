<?php
/**
* Implementation of hook_menu
*/
function agent_dashboard_menu() {
  $items = array();
  $items['users-info/%'] = array(
    'title'				=> 'Users Info',
    'description'		=> 'Users Info',
    'page callback'		=> 'users_info',
    'access callback'	=> 'user_is_logged_in',
	'page arguments' 	=> array(1),
	'file'				=> 'includes/user_info.inc',
    'type'				=> MENU_NORMAL_ITEM,
  );
 $items['vendor-feeds'] = array(
	'title'				=>	'Vendor Feeds',
	'description'		=>	'Vendor Feeds',
	'page callback'		=>	'vendor_feeds',
	'access callback'	=> 	TRUE,
	//'access callback'	=> 	'user_is_logged_in',
	//'page arguments' 	=> array(0,1,2)
  );
 $items['vendor-test'] = array(
	'title'				=>	'Agent Dashboard test',
	'description'		=>	'Agent Dashboard test',
	'page callback'		=> 'vendor_dash',
	'access callback'	=> 	TRUE,
  );
 return $items;
}

/**
 * Implements hook_init()
 */
function agent_dashboard_init(){
	global $base_url, $user;
	// FlexSlider js
	drupal_add_js(drupal_get_path('module', 'agent_dashboard') . '/flexslider/jquery.flexslider.js');
	drupal_add_js(drupal_get_path('module', 'agent_dashboard') . '/js/contact_grid.js');
	
	// FlexSlider CSS
	drupal_add_css(drupal_get_path('module', 'agent_dashboard') . '/flexslider/flexslider.css');
	drupal_add_css(drupal_get_path('module', 'agent_dashboard') . '/css/contact_grid.css');
}

/**
 * Implements hook_block_info().
 */
function agent_dashboard_block_info() {
	$blocks = array();
	$blocks['contact_grid'] = array(
		'info' => t('CB|One My Network'),
	);
	return $blocks;
}
/**
 * Implements hook_block_view().
 */
function agent_dashboard_block_view($delta='') {
	$block = array();
	switch($delta) {	
		case 'contact_grid' :
			$block['content'] = user_contact_grid();
		break;
	}

	return $block;
}

/**
 * Implements hook_theme
 **/
function agent_dashboard_theme($existing, $type, $theme, $path) {
	return array(
		'contact_grid' => array(
			'variables' => array('var_name' => NULL),
			'template' => 'template/contact_grid', // do not include .tpl.php
		),
	);
      return $theme;
}

/*
Function to get user picture
*/

function get_user_profile_pictures($user){
	if (!empty($account->picture)) {
		if (is_numeric($account->picture)) {
			$account->picture = file_load($account->picture);
		}
		if (!empty($account->picture->uri)) {
			$filepath = $account->picture->uri;
		}
	}
	elseif (variable_get('user_picture_default', '')) {
		$filepath = variable_get('user_picture_default', '');
	}
	$build = array(
	  '#theme' => 'user_picture',
	  '#account' => $user,
	);
	//$picture = drupal_render($build);
	$picture='<div class="user-picture">'.theme('image_style', array('path' => !empty($user->picture->uri) ? $user->picture->uri : variable_get('user_picture_default'), 'style_name' => 'thumbnail')).'</div>';
	return $picture;
}

/** 
** Function to get office_group nid
**/
function get_office_group_entityid($ref_enid) {
	//Query for getting node nid of vendor
	$vendor_query = db_select('field_data_field_vendor_employee', 'fve');
	$vendor_query->fields('fve', array('entity_id'));
	$vendor_query->condition('fve.field_vendor_employee_value ',$ref_enid,'=');
	$vendor_query->condition('fve.bundle  ','vendor','=');
	$vendor_query->condition('fve.entity_type   ','node','=');
	$vendor_nid = $vendor_query->execute()->fetchField();
	return $vendor_nid;
}

/**
** Function get_user_role_name() to get Roles
**/

function get_user_role_name($role_value) {
	$user_roles = array(13 => 'Office Assistant', 6 => 'Manager', 9 => 'Marketing Coordinator', 17 => 'Regional Marketing Manager');
	$result=array_intersect($user_roles,$role_value);
	$role_name = implode(',',$result);
	return $role_name;
}
/**
 * Callback function user_contact_grid()
 * to displayed contact grid
 **/
function user_contact_grid() {
	global $base_url, $user;
	$user_load = user_load($user->uid);
	$ofiice_id = $user_load->field_member_office['und'][0]['value'];
	$user_roles = array(13 => 'Office Assistant', 6 => 'Manager', 9 => 'Marketing Coordinator', 17 => 'Regional Marketing Manager');
	// Query for User's list on same office id.
	$query = db_select('users', 'u')->distinct();
	$query->innerJoin('users_roles', 'ur', 'u.uid = ur.uid');
	$query->leftJoin('field_data_field_member_office', 'fmo', 'u.uid = fmo.entity_id');
	$query->fields('u', array('uid'));
	$query->condition('fmo.entity_type','user','=');
	$query->condition('fmo.deleted',0,'=');
	$query->condition('fmo.field_member_office_value',$ofiice_id,'=');
	$query->condition('u.status',0,'<>');
	$query->condition('ur.rid',array(13, 6, 9, 17),'IN');
	$result = $query->execute()->fetchAll();
	
	// Query for geeting office group nid on basis of office id
	$office_query = db_select('field_data_field_office_id', 'foi');
	$office_query->fields('foi', array('entity_id'));
	$office_query->condition('foi.field_office_id_value',$ofiice_id,'=');
	$office_group_nid = $office_query->execute()->fetchField();
	
	// Query for getting field_vendor_employee entity id
	$vendor_emp_query = db_select('field_data_field_vendor_offices_served', 'fvos');
	$vendor_emp_query->fields('fvos', array('entity_id'));
	$vendor_emp_query->condition('fvos.field_vendor_offices_served_nid ',$office_group_nid,'=');
	$vendor_emp_query->condition('fvos.bundle','field_vendor_employee','=');
	$vendor_employee_enid = $vendor_emp_query->execute()->fetchAll();
	
	$network_list = array();
	$x = 0;
	$roles = array();
	foreach($result as $users) {
		//$ref_uid = $users->entity_id;
		$ref_uid = $users->uid;
		$user_load = user_load($ref_uid);
		$picture = get_user_profile_pictures($user_load);
		$roles = $user_load->roles;
		$role_name = get_user_role_name($roles);
		$network_list[$x]['user_id'] = $ref_uid;
		$network_list[$x]['image'] = $picture;
		$network_list[$x]['name'] = $user_load->field_preferred_name['und'][0]['value'];
		$network_list[$x]['role'] = $role_name;
		$network_list[$x]['banker'] = 'ColdwellBanker';
		$network_list[$x]['phone'] = $user_load->field_phone_direct['und'][0]['value'];
		$network_list[$x]['email'] = $user_load->field_person_email['und'][0]['value'];
		$network_list[$x]['hidden'] = 'only users';
		$network_list[$x]['fc_id'] = '';
		$x++;
	}
	foreach($vendor_employee_enid as $entityvalue) {
		$field_collection_id = $entityvalue->entity_id;
		$ref_officenid = get_office_group_entityid($field_collection_id);
		$field_collection_item_load = field_collection_item_load($field_collection_id);
		$node_load = node_load($ref_officenid);
		//Display vendor picture;
		$vendor_pic='<div class="user-picture">'.theme('image_style', array('path' => !empty($field_collection_item_load->field_vendor_contact_picture['und'][0]['uri']) ? $field_collection_item_load->field_vendor_contact_picture['und'][0]['uri'] : variable_get('user_picture_default'), 'style_name' => 'thumbnail')).'</div>';
		$network_list[$x]['user_id'] = $ref_officenid;
		$network_list[$x]['image'] = $vendor_pic;
		$network_list[$x]['name'] = $field_collection_item_load->field_vendor_contact_name['und'][0]['value'];
		$network_list[$x]['role'] = 'Vendor';
		$network_list[$x]['banker'] = $node_load->title;
		$network_list[$x]['phone'] = $field_collection_item_load->field_vendor_contact_phone['und'][0]['value'];
		$network_list[$x]['email'] = $field_collection_item_load->field_vendor_contact_email['und'][0]['value'];
		$network_list[$x]['hidden'] = 'only vendors';
		$network_list[$x]['fc_id'] = $field_collection_id;
		$x++;
	} 
	$data = array(
		'network_list' => $network_list,
	);
	$output = theme('contact_grid', array('var_name' => $data));
	return $output;
}

/**
** Callback function vendor_feeds()
** to imports the vendor details from
** csv file.
**/
function vendor_feeds() {
	global $user, $base_url;
	$current_date = date('Ymd');
	if(isset($_GET['date']) && $_GET['date'] != '') {
		$date = $_GET['date'];
	}
	else {
		$date = $current_date;
	}
	$vendor_term = taxonomy_term_load(297);
	$path = isset($vendor_term->field_local_destination_path['und'][0]['value']) ? $vendor_term->field_local_destination_path['und']['0']['value'] : '';
	
	$retention = isset($vendor_term->field_results_retention['und'][0]['value']) ? $vendor_term->field_results_retention['und']['0']['value'] : '';
	
	$notification_email = isset($vendor_term->field_notification_email['und'][0	]['value']) ? $vendor_term->field_notification_email['und']['0']['value'] : '';
	
	if($path !='' && is_dir($path)) { // check file path exists or empty
		$scanned_directory = array_diff(scandir($path), array('..', '.'));
		foreach($scanned_directory as $values) {
				$substr = substr($values, 19, -4);
			if($substr == $date) {
				$file_name = $values;
			}
		}
		@$file_path = $path.'/'.$file_name;
		if(is_file($file_path)) {
			$vendor_feeds = array_map('str_getcsv', file($file_path));
			unset($vendor_feeds[0]);
			foreach($vendor_feeds as $key => $data){
					
				$metro_id = check_plain($data[0]);
				$source = check_plain($data[1]);
				$url_path = check_plain($data[2]);
				$company_name = check_plain($data[3]);
				$company_url = check_plain($data[4]);
				$contact_name = check_plain($data[5]);
				$email = check_plain($data[6]);
				$phone = check_plain($data[7]);
				$description = check_plain($data[8]);
				$location_id = check_plain($data[9]);
				$set_location_id = check_plain($data[10]);
				
				$insert_error = 0;
				$update_error = 0;
				$ref_officeid = '';
				$cmpny_nid = 0;
				$locationid = array();
				$setlocationid = array();
				if(!empty($set_location_id)) {
					$setlocationid[] = $set_location_id;
				}
				if(!empty($location_id)) {
					$locationid[] = $location_id;
				}
				$merge = array_merge($locationid, $setlocationid);
				if(isset($merge)) {
					foreach($merge as $locvalue) {
						/** Query for getting office group nid. **/
						$offic_sql = "select fo_id.entity_id from field_data_field_office_id as fo_id 
									where fo_id.field_office_id_value = :location_id and fo_id.bundle = 'office_group'";
						$office_query = db_query($offic_sql, array(':location_id' => $locvalue));
						$count = $office_query->rowCount();
						if($count > 0) {
							$ref_officeid = $office_query->fetchField();
						}
					}
				}
				/** Query for getting office group nid. 
				if(isset($location_id) && !empty($location_id)) {
					$offic_sql = "select fo_id.entity_id from field_data_field_office_id as fo_id 
								where fo_id.field_office_id_value = :location_id and fo_id.bundle = 'office_group'";
					$office_query = db_query($offic_sql, array(':location_id' => $location_id));
					$ref_officeid = $office_query->fetchField();
				}
				**/
				/** Query for getting the count, If Comapany name is already exists. **/
				$contact_count = 0;
				if(isset($company_name) && !empty($company_name)) {
					$cmpny_sql = "select n.nid from node as n where n.title = :company_name and n.type = 'vendor'";
					$cmpny_query = db_query($cmpny_sql, array(':company_name' => $company_name));
					$cmpny_count = $cmpny_query->rowCount();
					//$cmpny_results = $cmpny_query->fetchAll();
					$cmpny_nid = $cmpny_query->fetchField();
				}
				if(empty($metro_id)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($source)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($url_path)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($company_name)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($contact_name)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($email)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($phone)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($description)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else if(empty($location_id)) {
					$insert_error = 1;
					$update_error = 1;
				}
				else {
				/** For creating the nodes.	**/
					$node = '';
					if($insert_error == 0 && $cmpny_count == 0) {
						$node = new stdClass();
						$node->type = 'vendor';
						$node->title = check_plain($data[3]);
						node_object_prepare($node);
						$node->language = 'und';
						$node->uid = $user->uid;
						node_save($node);
						$nodeupdate = node_load($node->nid);
						$node->field_vendor_website['und'][0]['value'] = $company_url;
						$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_vendor_employee'));
						$field_collection_item->field_vendor_contact_name['und'][0]['value'] = $contact_name;
						$field_collection_item->field_vendor_contact_email['und'][0]['value'] = $email;
						$field_collection_item->field_vendor_contact_phone['und'][0]['value'] = $phone;
						$field_collection_item->field_vendor_contact_title['und'][0]['value'] = $description;
						$field_collection_item->field_vendor_offices_served['und'][0]['nid'] = 	$ref_officeid;
						/** For upload vendor images **/
						$image = file_get_contents($url_path);
						$image_name = basename($url_path);
						$filepath = 's3://'.$image_name;
						$destination = $filepath;
						$replace = FILE_EXISTS_RENAME;
						//$file = file_save_data($image, $destination, FILE_EXISTS_RENAME);
						if ($uri = file_unmanaged_save_data($image, $destination, $replace)) {
							/** Create a file object. **/
							$file = new stdClass();
							$file->fid = NULL;
							$file->uri = $uri;
							$file->filename = drupal_basename($uri);
							$file->filemime = file_get_mimetype($file->uri);
							$file->uid = $user->uid;
							$file->status = FILE_STATUS_PERMANENT;
							// If we are replacing an existing file re-use its database record.
							if ($replace == FILE_EXISTS_RENAME) {
								$existing_files = file_load_multiple(array(), array('uri' => $uri));
								if (count($existing_files)) {
									$existing = reset($existing_files);
									$file->fid = $existing->fid;
									$file->filename = $existing->filename;
								}
							}
							elseif ($replace == FILE_EXISTS_RENAME && is_file($destination)) {
								$file->filename = drupal_basename($destination);
							}
							file_save($file);
							$file = (array)$file;
							$field_collection_item->field_vendor_contact_picture['und'][]= $file;
						}
						$field_collection_item->setHostEntity('node', $nodeupdate);
						$field_collection_item->save(TRUE);
						field_attach_update('node', $nodeupdate);
					} 
					elseif ($update_error == 0 && $cmpny_count > 0 ) {
						$node_update = node_load($cmpny_nid);
						$x = $node_update->field_vendor_employee['und'];
						$query = 0;
						if (count($x) > 0) {
							$nam = array();
							foreach($x as $k => $v) {
							  $nam[] = $v['value'];
							}
							$namcont = implode(",", $nam);
							$sql = "SELECT *  FROM {field_data_field_vendor_contact_name} WHERE entity_id IN ($namcont) AND field_vendor_contact_name_value LIKE '%$contact_name%'";
							$query = db_query($sql)->rowCount();
							$datafield = db_query($sql)->fetchAll();
						}
						if ($query == 0) {
							$field_collection_item = ''; 
							//$node_update->title = $company_name;
							$node_update->field_vendor_website['und'][0]['value'] = $company_url;
							$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_vendor_employee'));
							$field_collection_item->field_vendor_contact_name['und'][0]['value'] = 	$contact_name;
							$field_collection_item->field_vendor_contact_email['und'][0]['value'] = $email;
							$field_collection_item->field_vendor_contact_phone['und'][0]['value'] = $phone;
							$field_collection_item->field_vendor_contact_title['und'][0]['value'] = $description;
							$field_collection_item->field_vendor_offices_served['und'][0]['nid'] =  $ref_officeid;
							/** For upload vendor images **/
							$image = file_get_contents($url_path);
							$image_name = basename($url_path);
							$filepath = 's3://'.$image_name;
							$destination = $filepath;
							$replace = FILE_EXISTS_RENAME;
							//$file = file_save_data($image, $destination, FILE_EXISTS_RENAME);
							if ($uri = file_unmanaged_save_data($image, $destination, $replace)) {
								/** Create a file object. **/
								$file = new stdClass();
								$file->fid = NULL;
								$file->uri = $uri;
								$file->filename = drupal_basename($uri);
								$file->filemime = file_get_mimetype($file->uri);
								$file->uid = $user->uid;
								$file->status = FILE_STATUS_PERMANENT;
								// If we are replacing an existing file re-use its database record.
								if ($replace == FILE_EXISTS_RENAME) {
									$existing_files = file_load_multiple(array(), array('uri' => $uri));
									if (count($existing_files)) {
										$existing = reset($existing_files);
										$file->fid = $existing->fid;
										$file->filename = $existing->filename;
									}
								}
								elseif ($replace == FILE_EXISTS_RENAME && is_file($destination)) {
									$file->filename = drupal_basename($destination);
								}
								file_save($file);
							
								$file = (array)$file;
								$field_collection_item->field_vendor_contact_picture['und'][]= $file;
							}
							$field_collection_item->setHostEntity('node', $node_update); 
							// Save field-collection item.
							$field_collection_item->save();
							field_attach_update('node', $node_update);
						} 
						else 
						{
							$entity_id = $datafield[0]->entity_id;
							$field_collection_item_load = field_collection_item_load($entity_id);
							$values=$field_collection_item_load->field_vendor_offices_served['und'];
							$field_values=array();
							foreach($values as $value){
								$field_values[]=$value['nid'];
							}
							$field_collection_item_load->field_vendor_contact_name['und'][0]['value'] = $contact_name;
							$field_collection_item_load->field_vendor_contact_email['und'][0]['value'] = $email;
							$field_collection_item_load->field_vendor_contact_phone['und'][0]['value'] = $phone;
							$field_collection_item_load->field_vendor_contact_title['und'][0]['value'] = $description;
							if(in_array($ref_officeid, $field_values)){}
							else {
								$field_collection_item_load->field_vendor_offices_served['und'][]['nid'] =$ref_officeid;
							}
							/** For upload vendor images **/
							$image = file_get_contents($url_path);
							$image_name = basename($url_path);
							$filepath = 's3://'.$image_name;
							$destination = $filepath;
							$replace = FILE_EXISTS_RENAME;
							//$file = file_save_data($image, $destination, FILE_EXISTS_RENAME);
							if ($uri = file_unmanaged_save_data($image, $destination, $replace)) {
								/** Create a file object. **/
								$file = new stdClass();
								$file->fid = NULL;
								$file->uri = $uri;
								$file->filename = drupal_basename($uri);
								$file->filemime = file_get_mimetype($file->uri);
								$file->uid = $user->uid;
								$file->status = FILE_STATUS_PERMANENT;
								// If we are replacing an existing file re-use its database record.
								if ($replace == FILE_EXISTS_RENAME) {
									$existing_files = file_load_multiple(array(), array('uri' => $uri));
									if (count($existing_files)) {
										$existing = reset($existing_files);
										$file->fid = $existing->fid;
										$file->filename = $existing->filename;
									}
								}
								elseif ($replace == FILE_EXISTS_RENAME && is_file($destination)) {
									$file->filename = drupal_basename($destination);
								}
								file_save($file);
							}
							$file = (array)$file;
							$field_collection_item_load->field_vendor_contact_picture['und'][]= $file;
							$field_collection_item_load->save(TRUE);
						}
					} 
				}
			}
			return drupal_set_message(t("Successfully, nodes are created and updated."), 'status');
			exit;
		}
	}
}

/**
* Callback function vendor_dash()
* to display vendor dashboard
* for testing purpose
**/

function vendor_dash() {
	return '';
}


